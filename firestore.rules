rules_version = '2';

/**
 * Firestore Security Rules
 *
 * These rules control access to your Firestore database.
 *
 * Key principles:
 * - Public can READ most collections (projects, experience, skills)
 * - Only admin can WRITE to any collection
 * - Messages collection allows public WRITE (for contact form)
 * - Admin UID is checked for write operations
 *
 * To deploy these rules:
 * 1. Go to Firebase Console > Firestore Database > Rules
 * 2. Copy and paste these rules
 * 3. Click "Publish"
 *
 * Or use Firebase CLI:
 * firebase deploy --only firestore:rules
 */

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    function isAdmin() {
      // IMPORTANT: Before deploying, replace 'YOUR_ADMIN_UID_HERE' with your actual admin UID
      // Get your admin UID from: Firebase Console > Authentication > Users
      // Or from your .env.local file: NEXT_PUBLIC_ADMIN_UID
      return request.auth != null && request.auth.uid == 'YOUR_ADMIN_UID_HERE';
    }

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Projects collection
    // Public can read, only admin can write
    match /projects/{projectId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Experience collection
    // Public can read, only admin can write
    match /experience/{experienceId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Skills collection
    // Public can read, only admin can write
    match /skills/{skillId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Messages collection
    // Public can create (for contact form submissions)
    // Only admin can read, update, delete
    match /messages/{messageId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();

      // Validate message data on creation
      allow create: if request.resource.data.keys().hasAll(['name', 'email', 'subject', 'message', 'createdAt']) &&
                      request.resource.data.name is string &&
                      request.resource.data.name.size() > 0 &&
                      request.resource.data.name.size() <= 100 &&
                      request.resource.data.email is string &&
                      request.resource.data.email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$') &&
                      request.resource.data.subject is string &&
                      request.resource.data.subject.size() > 0 &&
                      request.resource.data.subject.size() <= 200 &&
                      request.resource.data.message is string &&
                      request.resource.data.message.size() > 0 &&
                      request.resource.data.message.size() <= 5000;
    }

    // Resume collection
    // Public can read, only admin can write
    match /resume/{resumeId} {
      allow read: if true;
      allow create, update, delete: if isAdmin();
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
